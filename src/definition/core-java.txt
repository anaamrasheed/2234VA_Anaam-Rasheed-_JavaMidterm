***ANSWER ALL QUESTIONS BELOW***

What is a programming language?
Answer: A set of vocabulary and grammatical rules for instructing a computer or computing device to perform specific tasks.

What is a JDK composed of? Define each components?
Answer: Java Developer Kit is composed of:
-The Java Runtime Environment (JRE): provides minimum requirements for executing a Java application.
                                     Consists of the JVM(Java virtual machine),core classes, and supporting files.

-an interpreter/loader (Java):a stand-alone version of the Java interpreter built into the HotJava browser.
The runtime interpreter provides the support to run Java executable programs in compiled, bytecode format.

- a compiler (javac): used to compile Java source code files into executable Java bytecode classes. In Java, source code files have
 the extension .java. The Java compiler takes files with this extension and generates executable class files with the .class extension.

-an archiver (jar):
-a documentation generator (Javadoc):


What is an IDE?
Answer: Integrated Development Environment, enables programmers to consolidate the different aspects of writing a computer program.
       IDEs increase programmer productivity by combining common activities of writing software into a single application:
       editing source code, building executables, and debugging.

What are some of the most popular Java IDEs available in the market?
Answer: IntelliJ, Eclipse, BlueJ, JCreator

Explain the entire java life cycle.
Answer: Create a source code document, and run it through a source code compiler. Compiler creates a new document in Bytecode.
        The JVM reads and runs the bytecode.

What is a class?
Answer:A class is a blueprint from which an object is created.

What is an object?
Answer: An instance of a class. All objects have states (instance variables-things it knows about itself) and
behaviors(methods-things an object can do)

What is the entry point of an application?
Answer: the main method

Why is the main() static?
       Answer: It is part of its class. So it does not need an object to be called. Non-static methods or variables,
       you must create an object of that class in order to call them.

Which class is the superclass of all classes?
Answer: the Object class

What is difference between path and classpath variables?
Answer:  The path environment variable is used to specify the set of directories which contains executional programs.
         The class path environment variable is used to specify the location of the classes and packages.

What is the difference between an Interface and Abstract class?
Answer: An interface is 100% abstract since it can have only abstract methods. It can have default and static methods also.
        An abstract class is not 100% abstract because it can have abstract and non-abstract (concrete) methods.

Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer: No, interfaces and abstract classes cannot be instantiated (cannot create objects of interfaces or abstract classes)

What is Access Modifier?
Answer: Keywords that provide access to members of a class within a Java program. (Public, Private, Protected and Default)
        A Java access modifier specifies which classes can access a given class and its fields, methods, and constructors.
        We can use access modifiers for a class, its constructors, fields, and methods.

What is OOP? Define each OOP concept.
Answer:    Object-Oriented Programming:

-Abstraction:hiding complex/sensitive functionality from end-user by hiding methods/variables and wrapping them in overriden
              functionality.
-Encapsulation: process of binding data (variables) and code acting on the data (methods) together as a single unit..(data hiding)
                When we don't want to allow the user/other people to change the states/variables of a class.

-Inheritance: one object acquires all the properties and behaviors of a parent object. The idea behind inheritance in Java is
that you can create new classes that are built upon existing classes. When you inherit from an existing class,
you can reuse methods and fields of the parent class.

-Polymorphism: ability to have multiple methods/functionality with the same name & same/similar functionality,
                      but acting on different numbers/types of objects/variables

                      2 Types of Polymorphism
                          1 - Method Overloading (Compile-Time Polymorphism)
                          2 - Method Overriding (Run-Time Polymorphism)

What is Java Package and which package is imported by default?
Answer: -Basically a folder that organizes a set of related classes and interfaces. Because software written in the Java programming
        language can be composed of hundreds or thousands of individual classes,it makes sense to keep things organized by placing
        related classes and interfaces into packages.
        -The Java compiler imports the java.lang package internally by default.

What is an API? List some API's that you have used so far.
Answer: An API is a set of programming code that enables data transmission between one software product and another.
        APIs let your product or service communicate with other products and services without having to know how they’re implemented.
        This can simplify app development, saving time and money. When you’re designing new tools and products—or managing existing ones—
        APIs give you flexibility; simplify design, administration, and use; and provide opportunities for innovation.

        -Travel booking, Paypal

Does java support multiple inheritance? Why or why not?
Answer: Multiple inheritance is where a class inherits the properties and behavior of multiple classes.
        No, Java does not support multiple inheritance. The reason is to prevent ambiguity. The compiler would not know which methods to call

What is method overloading and when does it happen?
Answer:  Two or more methods may have the same name if they differ in parameters (different number of parameters, different types of
        parameters, or both).

Explain exceptions in java and how to handle them.
Answer:  An Exception is an unwanted event that interrupts the normal flow of the program.When an exception occurs program execution gets
        terminated. In such cases we get a system generated error message.

        Java provides two different options to handle an exception. You can either use the try-catch-finally approach to handle all kinds of exceptions.
           Or you can use the try-with-resource approach which allows an easier cleanup process for resources.

What is static keyword? When and how do we use it?
Answer: It indicates that the particular member belongs to a class itself, rather than to an instance of that class.
        This means that only one instance of that static member is created which is shared across all instances of the class.
         We use static keyword for variables and methods that are common to all objects.
        For a static method or variable, we do not need to create an object to call it. We can just reference the class name.

What is final keyword? When and how do we use it?
Answer: It is a non-access modifier applicable only to variables, methods and classes. Anything declared with a `final`
        CANNOT be changed after initialization. Final variables are used to create constant variables. Final methods are used to
        prevent method overriding. Final classes are used to prevent inheritance.


Explain the difference between final, finally and finalize?
Answer:

What is a constructor?
Answer: Constructor is a block of code that initializes the newly created object. Constructors are implicitly defined in every class,
        by default (Default Constructor).

Can we have multiple constructors in a class?
Answer: Yes

If we don't have a constructor declared, what is called during the object creation?
Answer: the Default constructor. Default constructor is the constructor that accepts NO parameters.

What is "this" keyword in Java? When would we use it?
Answer:

What is "super" keyword in Java? What are some scenarios we would use it?
Answer:

What does JVM stand for?
Answer: Java Virtual Machine

Is JVM platform independent?
Answer: Yes, JVM is platform independent.

What version of Java are you using?
Answer: 8

What does JAR stand for?
Answer: Java Archive

What is the difference between JDK and JVM?
Answer:  The Java Development Kit (JDK) is a software development environment which is used to develop Java applications and applets.
        It physically exists. JDK contains a private Java Virtual Machine (JVM) and a few other resources such as
        an interpreter/loader (java), a compiler (javac), an archiver (jar), a documentation generator (Javadoc), etc.
        to complete the development of a Java Application. It is platform dependent.

        The JVM (Java Virtual Machine) is an abstract machine. It's called a virtual machine because it doesn't physically exist.
        It is a specification that provides a runtime environment in which Java bytecode can be executed. It can also run those programs
         which are written in other languages and compiled to Java bytecode. It is platform-independent.


What is the difference between JVM and JRE?
Answer: JRE is a software bundle which contains Java class libraries with necessary components to run Java code. It is platform dependent.
        It is the part of Java that creates the JVM.

        JVM executes Java byte code and provides an environment for executing it. It is platform independent, and It is the Java platform
        component that executes source code. It does not include software development tools.

Explain the difference between compile-time and run-time?
Answer: Compile-time is the time period in which you are compiling your code. Run-time is the time period when a piece of software is executed.

What is heap?
Answer:

How does Java manage its memory?
Answer: Java uses an automatic memory management system called a garbage collector.

What is the difference between String, StringBuffer and StringBuilder?
Answer:   Strings are immutable while StringBuffer and StringBuilder are mutable. So, Strings cannot be changed when you use
        the String class; whereas Strings can change if you use the StringBuffer and StringBuilder class.

What is Singleton class?
Answer: Used to restrict the instantiation of a class and ensures that only one instance of
        the class exists in the JVM. In other words, a singleton class is a class that can have only one object
        (an instance of the class) at a time per JVM instance.

What is Serialization and Deserialization?
Answer:

Explain the difference between While and Do..While loops?
Answer:

What is Enum?
Answer:

What is Iterator?
Answer:

Which one will take more memory: an int or Integer? Why?
Answer:

Why are Strings considered to be immutable in Java?
Answer:

What is constructor chaining in Java?
Answer:

The difference between Serial and Parallel Garbage Collector?
Answer:

What does JIT stands for?
Answer:

Explain the process of Java garbage collection?
Answer:

Can you guarantee the garbage collection process?
Answer:

What is the difference between stack and heap in Java?
Answer:

What is reflection in Java and why is it useful?
Answer:

What is multithreading in Java?
Answer:

What is synchronization in Java?
Answer:

What is a Framework?
Answer:

What are the testing Frameworks available in Java?
Answer:

What are jUnit and testNG?
Answer:

What are the dependencies for this project?
Answer:

What is dependency injection in Java?
Answer:

Explain what static binding and dynamic binding is?
Answer:


